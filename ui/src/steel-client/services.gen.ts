// This file is auto-generated by @hey-api/openapi-ts

import {
  createClient,
  createConfig,
  type Options,
} from "@hey-api/client-fetch";
import {
  type ScrapeData,
  type ScrapeError,
  type ScrapeResponse2,
  type ScreenshotData,
  type ScreenshotError,
  type ScreenshotResponse2,
  type PdfData,
  type PdfError,
  type PdfResponse,
  type HealthError,
  type HealthResponse,
  type LaunchBrowserSessionData,
  type LaunchBrowserSessionError,
  type LaunchBrowserSessionResponse,
  type GetSessionsError,
  type GetSessionsResponse,
  type GetSessionDetailsData,
  type GetSessionDetailsError,
  type GetSessionDetailsResponse,
  type GetBrowserContextData,
  type GetBrowserContextError,
  type GetBrowserContextResponse,
  type ReleaseBrowserSessionData,
  type ReleaseBrowserSessionError,
  type ReleaseBrowserSessionResponse,
  type ReleaseBrowserSessionsError,
  type ReleaseBrowserSessionsResponse,
  type GetDevtoolsUrlError,
  type GetDevtoolsUrlResponse,
  ScrapeResponseTransformer,
  LaunchBrowserSessionResponseTransformer,
  GetSessionsResponseTransformer,
  GetSessionDetailsResponseTransformer,
} from "./types.gen";

export const client = createClient(createConfig());

/**
 * Scrape a URL
 * Scrape a URL
 */
export const scrape = <ThrowOnError extends boolean = false>(
  options?: Options<ScrapeData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    ScrapeResponse2,
    ScrapeError,
    ThrowOnError
  >({
    ...options,
    url: "/v1/scrape",
    responseTransformer: ScrapeResponseTransformer,
  });
};

/**
 * Take a screenshot
 * Take a screenshot
 */
export const screenshot = <ThrowOnError extends boolean = false>(
  options?: Options<ScreenshotData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    ScreenshotResponse2,
    ScreenshotError,
    ThrowOnError
  >({
    ...options,
    url: "/v1/screenshot",
  });
};

/**
 * Get the PDF content of a page
 * Get the PDF content of a page
 */
export const pdf = <ThrowOnError extends boolean = false>(
  options?: Options<PdfData, ThrowOnError>
) => {
  return (options?.client ?? client).post<PdfResponse, PdfError, ThrowOnError>({
    ...options,
    url: "/v1/pdf",
  });
};

/**
 * Check if the server and browser are running
 * Check if the server and browser are running
 */
export const health = <ThrowOnError extends boolean = false>(
  options?: Options<unknown, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    HealthResponse,
    HealthError,
    ThrowOnError
  >({
    ...options,
    url: "/v1/health",
  });
};

/**
 * Launch a browser session
 * Launch a browser session
 */
export const launchBrowserSession = <ThrowOnError extends boolean = false>(
  options?: Options<LaunchBrowserSessionData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    LaunchBrowserSessionResponse,
    LaunchBrowserSessionError,
    ThrowOnError
  >({
    ...options,
    url: "/v1/sessions",
    responseTransformer: LaunchBrowserSessionResponseTransformer,
  });
};

/**
 * Get all sessions (only returns current session)
 * Get all sessions (only returns current session)
 */
export const getSessions = <ThrowOnError extends boolean = false>(
  options?: Options<unknown, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    GetSessionsResponse,
    GetSessionsError,
    ThrowOnError
  >({
    ...options,
    url: "/v1/sessions",
    responseTransformer: GetSessionsResponseTransformer,
  });
};

/**
 * Get session details
 * Get session details
 */
export const getSessionDetails = <ThrowOnError extends boolean = false>(
  options: Options<GetSessionDetailsData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    GetSessionDetailsResponse,
    GetSessionDetailsError,
    ThrowOnError
  >({
    ...options,
    url: "/v1/sessions/{sessionId}",
    responseTransformer: GetSessionDetailsResponseTransformer,
  });
};

/**
 * Get a browser context
 * Get a browser context
 */
export const getBrowserContext = <ThrowOnError extends boolean = false>(
  options: Options<GetBrowserContextData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    GetBrowserContextResponse,
    GetBrowserContextError,
    ThrowOnError
  >({
    ...options,
    url: "/v1/sessions/{sessionId}/context",
  });
};

/**
 * Release a browser session
 * Release a browser session
 */
export const releaseBrowserSession = <ThrowOnError extends boolean = false>(
  options: Options<ReleaseBrowserSessionData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    ReleaseBrowserSessionResponse,
    ReleaseBrowserSessionError,
    ThrowOnError
  >({
    ...options,
    url: "/v1/sessions/{sessionId}/release",
  });
};

/**
 * Release browser sessions
 * Release browser sessions
 */
export const releaseBrowserSessions = <ThrowOnError extends boolean = false>(
  options?: Options<unknown, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    ReleaseBrowserSessionsResponse,
    ReleaseBrowserSessionsError,
    ThrowOnError
  >({
    ...options,
    url: "/v1/sessions/release",
  });
};

/**
 * Get the URL for the DevTools inspector
 * Get the URL for the DevTools inspector
 */
export const getDevtoolsUrl = <ThrowOnError extends boolean = false>(
  options?: Options<unknown, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    GetDevtoolsUrlResponse,
    GetDevtoolsUrlError,
    ThrowOnError
  >({
    ...options,
    url: "/v1/devtools/inspector.html",
  });
};
